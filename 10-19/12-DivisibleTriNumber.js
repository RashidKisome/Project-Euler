/* 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisor


*/

let divisibleTriangleNumber = (n) => {
  // the first thing we want to do is generate our triangle numbers
  let currentTriangular = 0;
  let count = 0; // keeps track of triangular numbers that we have generated
  // infinite while, not recommended but ok in this case
  while (true) {
    // first iteration we'll have count going up from 0 to 1, then currentTriangular going from 0 to 1
    // with each iteration of this while  loop we'll have a new triangular number
    count = count + 1;
    currentTriangular = currentTriangular + count;

    // a variable that counts the number of divisors
    let divisorCount = 0;
    let i;
    for (i = 1; i < Math.sqrt(currentTriangular); i++) {
      if (currentTriangular % i === 0) {
        // we will try diving all the numbers between 1 and its square root
        divisorCount = divisorCount + 2; // if successfully divided, we will increase the square root by root
        // for each factor that we find beneath the squareroot, we will also find one above the suareroot
      }
    }
    // this checks if the squareroot of the current triangular number is an interger
    if (Number.isInteger(Math.sqrt(currentTriangular))) {
      // if suare root is a whole number
      divisorCount = divisorCount + 1;
    }
    console.log(
      "General Triangular " +
        currentTriangular +
        "with" +
        divisorCount +
        "divisors"
    );

    if (divisorCount > n) {
      // if diviorCount is greater than n
      return currentTriangular;
    }
  }
};

console.log("result is " + divisibleTriangleNumber(23));

// divisibleTriangleNumber(167) should return 1385280.
// divisibleTriangleNumber(23) should return 630.
